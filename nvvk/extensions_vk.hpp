/* auto generated by extensions_vk.lua */
/* Copyright (c) 2018, NVIDIA CORPORATION. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *  * Neither the name of NVIDIA CORPORATION nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#pragma once

#include <vulkan/vulkan.h>

/* loaders */
#if VK_KHR_push_descriptor
int load_VK_KHR_push_descriptor(VkDevice device, PFN_vkGetDeviceProcAddr getDeviceProcAddr);
#endif

#if VK_KHR_create_renderpass2
int load_VK_KHR_create_renderpass2(VkDevice device, PFN_vkGetDeviceProcAddr getDeviceProcAddr);
#endif

#if VK_KHR_draw_indirect_count
int load_VK_KHR_draw_indirect_count(VkDevice device, PFN_vkGetDeviceProcAddr getDeviceProcAddr);
#endif

#if VK_KHR_8bit_storage
int load_VK_KHR_8bit_storage(VkDevice device, PFN_vkGetDeviceProcAddr getDeviceProcAddr);
#endif

#if VK_KHR_driver_properties
int load_VK_KHR_driver_properties(VkDevice device, PFN_vkGetDeviceProcAddr getDeviceProcAddr);
#endif

#if VK_KHR_depth_stencil_resolve
int load_VK_KHR_depth_stencil_resolve(VkDevice device, PFN_vkGetDeviceProcAddr getDeviceProcAddr);
#endif

#if VK_NV_corner_sampled_image
int load_VK_NV_corner_sampled_image(VkDevice device, PFN_vkGetDeviceProcAddr getDeviceProcAddr);
#endif

#if VK_NVX_device_generated_commands
int load_VK_NVX_device_generated_commands(VkDevice device, PFN_vkGetDeviceProcAddr getDeviceProcAddr);
#endif

#if VK_NV_viewport_array2
int load_VK_NV_viewport_array2(VkDevice device, PFN_vkGetDeviceProcAddr getDeviceProcAddr);
#endif

#if VK_NV_viewport_swizzle
int load_VK_NV_viewport_swizzle(VkDevice device, PFN_vkGetDeviceProcAddr getDeviceProcAddr);
#endif

#if VK_EXT_conservative_rasterization
int load_VK_EXT_conservative_rasterization(VkDevice device, PFN_vkGetDeviceProcAddr getDeviceProcAddr);
#endif

#if VK_EXT_depth_clip_enable
int load_VK_EXT_depth_clip_enable(VkDevice device, PFN_vkGetDeviceProcAddr getDeviceProcAddr);
#endif

#if VK_EXT_sampler_filter_minmax
int load_VK_EXT_sampler_filter_minmax(VkDevice device, PFN_vkGetDeviceProcAddr getDeviceProcAddr);
#endif

#if VK_EXT_sample_locations
int load_VK_EXT_sample_locations(VkDevice device, PFN_vkGetDeviceProcAddr getDeviceProcAddr);
#endif

#if VK_EXT_descriptor_indexing
int load_VK_EXT_descriptor_indexing(VkDevice device, PFN_vkGetDeviceProcAddr getDeviceProcAddr);
#endif

#if VK_NV_shading_rate_image
int load_VK_NV_shading_rate_image(VkDevice device, PFN_vkGetDeviceProcAddr getDeviceProcAddr);
#endif

#if VK_NV_ray_tracing
int load_VK_NV_ray_tracing(VkDevice device, PFN_vkGetDeviceProcAddr getDeviceProcAddr);
#endif

#if VK_NV_representative_fragment_test
int load_VK_NV_representative_fragment_test(VkDevice device, PFN_vkGetDeviceProcAddr getDeviceProcAddr);
#endif

#if VK_NV_compute_shader_derivatives
int load_VK_NV_compute_shader_derivatives(VkDevice device, PFN_vkGetDeviceProcAddr getDeviceProcAddr);
#endif

#if VK_NV_mesh_shader
int load_VK_NV_mesh_shader(VkDevice device, PFN_vkGetDeviceProcAddr getDeviceProcAddr);
#endif

#if VK_EXT_pci_bus_info
int load_VK_EXT_pci_bus_info(VkDevice device, PFN_vkGetDeviceProcAddr getDeviceProcAddr);
#endif

#if VK_EXT_memory_budget
int load_VK_EXT_memory_budget(VkDevice device, PFN_vkGetDeviceProcAddr getDeviceProcAddr);
#endif

#if VK_EXT_memory_priority
int load_VK_EXT_memory_priority(VkDevice device, PFN_vkGetDeviceProcAddr getDeviceProcAddr);
#endif

#if VK_NV_dedicated_allocation_image_aliasing
int load_VK_NV_dedicated_allocation_image_aliasing(VkDevice device, PFN_vkGetDeviceProcAddr getDeviceProcAddr);
#endif

#if VK_EXT_buffer_device_address
int load_VK_EXT_buffer_device_address(VkDevice device, PFN_vkGetDeviceProcAddr getDeviceProcAddr);
#endif

#if VK_NV_cooperative_matrix
int load_VK_NV_cooperative_matrix(VkDevice device, PFN_vkGetDeviceProcAddr getDeviceProcAddr);
#endif


