local header = 
[[
/* auto generated by structs_vk.lua */
/* Copyright (c) 2018, NVIDIA CORPORATION. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *  * Neither the name of NVIDIA CORPORATION nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 
#pragma once
]]

local function generate(outfilename, header)
  local sdkpath = os.getenv("VULKAN_SDK")
  assert(sdkpath, "Vulkan SDK not found")
  
  local vulkan = io.open(sdkpath.."/Include/vulkan/vulkan_core.h","rt")
  local str = vulkan:read("*a")
  vulkan:close()
  
  local outfile = io.open(outfilename, "wt")
  assert(outfile)
  
  local out = ""
  out = out.."  template <class T> T make(){ return T(); }\n"
  out = out.."  template <class T> void clear(T& ref){ ref = make<T>(); }\n"
  
  local structtypes = {}
  local typesstr = str:match("typedef enum VkStructureType {(.-)}")
  for name in typesstr:gmatch("(VK_STRUCTURE_TYPE_[%w_]-) = %d+,") do
    --print(name)
    structtypes[name] = true
  end
  
  local structs = {}
  for name in str:gmatch("typedef struct Vk([%w_]+) {") do
    local nameext, ext  = name:match("(.-)([A-Z]+)$")
    nameparse = ext and nameext or name
  
    local enum = "VK_STRUCTURE_TYPE"
    for s in nameparse:gmatch("[A-Z0-9][a-z]*") do
      enum = enum.."_"..s
    end
    if (ext) then
      enum = enum.."_"..ext
    end
    enum = string.upper(enum)
    
    if (structtypes[enum]) then
      local sname = "Vk"..name
      --out = out.."  inline "..sname.." make_"..sname.."(){\n    return "..sname.."{"..enum.."};\n  }\n"
      out = out.."  template<> inline "..sname.." make<"..sname..">(){\n    return "..sname.."{"..enum.."};\n  }\n"
    end
  end
  
  outfile:write(header)
  outfile:write("namespace nv_helpers_vk {\n")
  outfile:write(out)
  outfile:write("}\n")
  outfile:flush()
  outfile:close()
end

generate("structs_vk.hpp", header)